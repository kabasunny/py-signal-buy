syntax = "proto3";

// go_packageオプションを追加
option go_package = "go-optimal-stop/experiment_proto";

// サービスの定義
service MLStockService {
  rpc GetMLStockData (MLStockRequest) returns (MLStockResponse);
}

// リクエストメッセージの定義
message MLStockRequest {
  repeated string symbols = 1;
  string start_date = 2;
  string end_date = 3;
}

// レスポンスメッセージの定義
message MLStockResponse {
  repeated MLSymbolData symbol_data = 1;  // シンボルごとのデータリスト
}

// シンボルごとのデータとシグナルを格納するメッセージの定義
message MLSymbolData {
  string symbol = 1;  // シンボル名
  repeated MLDailyData daily_data = 2;  // 日足データリスト　ATR計算データを30個含む
  repeated string signals = 3;  // 予測結果の日付リスト
  map<string, ModelPredictions> model_predictions = 4;  // 各モデルの予測結果
  int64 priority = 5;  // 優先順位
  string split_date = 6;  // 訓練終了日、翌日以降が予測対象日
}

// 日足データの定義
message MLDailyData {
  string date = 1;
  float open = 2;
  float high = 3;
  float low = 4;
  float close = 5;
  int64 volume = 6;
}

// 各モデルの予測結果を保持するメッセージの定義
message ModelPredictions {
  repeated string prediction_dates = 1;  // 予測結果の日付リスト
}




// pip install --upgrade protobuf // Protobufのバージョンを更新
// pip install --upgrade protobuf grpcio grpcio-tools // すべてのProtobufパッケージを最新バージョンに更新


// protoc --python_out=. result/ml_stock_service.proto

// protoc --proto_path=../py-signal-buy/result --go_out=./experiment_proto --go_opt=paths=source_relative --go-grpc_out=./experiment_proto --go-grpc_opt=paths=source_relative ../py-signal-buy/result/ml_stock_service.proto


